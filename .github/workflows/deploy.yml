name: Deploy Django Backend to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Create .env File from Secrets
      - name: Create .env File from Secrets
        run: |
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" > .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

      # Docker login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/secondproject-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/secondproject-backend:latest

      # Deploy to AWS EC2 using SSH
      - name: Deploy to AWS EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VM_IP: ${{ secrets.VM_IP }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          # Create SSH key file
          echo "$SSH_PRIVATE_KEY" > aws-ec2-key.pem
          chmod 600 aws-ec2-key.pem

          # Transfer .env file to EC2 instance
          scp -o StrictHostKeyChecking=no -i aws-ec2-key.pem .env "$VM_USER@$VM_IP:/home/$VM_USER/.env"

          # Connect to EC2 instance and deploy
          ssh -o StrictHostKeyChecking=no -i aws-ec2-key.pem "$VM_USER@$VM_IP" << EOF
            set -e
            echo "Starting deployment on AWS EC2..."

            # Docker login
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Stop and remove existing containers if they exist
            sudo docker rm -f secondproject-backend || true
            sudo docker rm -f redis || true

            # Cleanup unused Docker resources
            sudo docker system prune -a -f

            # Create Docker network if it doesn't exist
            sudo docker network create secondproject-network || true

            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/secondproject-backend:latest

            # Start Redis container
            echo "Starting Redis container..."
            sudo docker run -d --name redis --network secondproject-network -p 6379:6379 redis:latest

            # Start Django backend container
            echo "Starting Django backend container..."
            sudo docker run -d --name secondproject-backend \
              --network secondproject-network \
              -p 8000:8000 \
              --env-file /home/$VM_USER/.env \
              ${{ secrets.DOCKER_USERNAME }}/secondproject-backend:latest

            echo "Deployment complete!"
          EOF
